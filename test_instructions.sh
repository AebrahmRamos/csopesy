#!/bin/bash

# CSOPESY Automatic Process Instruction Test Script
# This script tests all 6 process instructions: PRINT, DECLARE, ADD, SUBTRACT, SLEEP, FOR

echo "=========================================="
echo "  CSOPESY Process Instruction Test"
echo "=========================================="
echo ""

echo "Building CSOPESY..."
g++ -std=c++20 -pthread -o csopesy main.cpp ConsoleManager.cpp ProcessManager.cpp ProcessGenerator.cpp Process.cpp Scheduler.cpp Screen.cpp ReportGenerator.cpp InstructionGenerator.cpp

if [ $? -ne 0 ]; then
    echo "‚ùå Build failed!"
    exit 1
fi

echo "‚úÖ Build successful!"
echo ""

echo "Starting CSOPESY test sequence..."
echo ""

# Create input sequence for testing
cat << 'EOF' > test_input.txt
initialize
scheduler-start
EOF

echo "Test sequence will:"
echo "1. Initialize the system"
echo "2. Start automatic process generation (creates processes with random instructions)"
echo "3. Wait a few seconds for processes to be created and executed"
echo "4. Check process status and execution logs"
echo ""

echo "Starting test..."
echo ""

# Start CSOPESY with initial commands
timeout 10s ./csopesy < test_input.txt &
CSOPESY_PID=$!

# Wait a bit for processes to be generated
sleep 3

# Now create another input to check process status
cat << 'EOF' > status_check.txt
screen -ls
screen -r p01
process-smi
exit
screen -r p02
process-smi
exit
exit
EOF

echo "Checking process status..."
timeout 10s ./csopesy < status_check.txt

# Cleanup
rm -f test_input.txt status_check.txt

echo ""
echo "=========================================="
echo "  Test Complete!"
echo "=========================================="
echo ""
echo "What you should see:"
echo "‚úÖ Processes p01, p02, etc. created automatically"
echo "‚úÖ Each process has randomized instructions (PRINT, DECLARE, ADD, SUBTRACT, SLEEP, FOR)"
echo "‚úÖ Instructions execute automatically in the background"
echo "‚úÖ process-smi shows execution log with format:"
echo "   [001/XXX] EXECUTED: DECLARE(var0, 1234)"
echo "   [002/XXX] > CURRENT: ADD(var1, var0, 567)"
echo "   [003/XXX] PENDING: [Next instruction]"
echo "‚úÖ Variables section shows current variable values"
echo ""
echo "üéâ All 6 process instructions are now working automatically!"
echo "   - PRINT: Displays messages from processes"
echo "   - DECLARE: Creates variables with values"
echo "   - ADD: Performs addition with overflow protection"
echo "   - SUBTRACT: Performs subtraction with underflow protection" 
echo "   - SLEEP: Pauses process execution for specified ticks"
echo "   - FOR: Executes nested instruction loops"
